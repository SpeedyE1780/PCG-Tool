<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PCG</name>
    </assembly>
    <members>
        <member name="T:PCGAPI.Vector3">
            <summary>
            Represent a Vector3
            </summary>
        </member>
        <member name="F:PCGAPI.Vector3.x">
            <summary>
            Value of x axis
            </summary>
        </member>
        <member name="F:PCGAPI.Vector3.y">
            <summary>
            Value of y axis
            </summary>
        </member>
        <member name="F:PCGAPI.Vector3.z">
            <summary>
            Value of z axis
            </summary>
        </member>
        <member name="M:PCGAPI.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Construct a Vector3
            </summary>
            <param name="x">Value of x axis</param>
            <param name="y">Value of y axis</param>
            <param name="z">Value of z axis</param>
        </member>
        <member name="M:PCGAPI.Vector3.Equals(System.Object)">
            <summary>
            Checks for equality between this and other
            </summary>
            <param name="other">Object being compared to this</param>
            <returns>True if this == object</returns>
        </member>
        <member name="M:PCGAPI.Vector3.GetHashCode">
            <summary>
            Returns the instance hash code
            </summary>
            <returns>The instance hash code</returns>
        </member>
        <member name="M:PCGAPI.Vector3.op_Equality(PCGAPI.Vector3,PCGAPI.Vector3)">
            <summary>
            Checks for equality between lhs and rhs
            </summary>
            <param name="lhs">Vector on the left side of ==</param>
            <param name="rhs">Vector on the right side of ==</param>
            <returns>True if lhs == rhs</returns>
        </member>
        <member name="M:PCGAPI.Vector3.op_Inequality(PCGAPI.Vector3,PCGAPI.Vector3)">
            <summary>
            Checks for inequality between lhs and rhs
            </summary>
            <param name="lhs">Vector on the left side of !=</param>
            <param name="rhs">Vector on the right side of !=</param>
            <returns>True if lhs != rhs</returns>
        </member>
        <member name="T:PCGAPI.Vector4">
            <summary>
            Represents a Vector4
            </summary>
        </member>
        <member name="F:PCGAPI.Vector4.x">
            <summary>
            Value of x axis
            </summary>
        </member>
        <member name="F:PCGAPI.Vector4.y">
            <summary>
            Value of y axis
            </summary>
        </member>
        <member name="F:PCGAPI.Vector4.z">
            <summary>
            Value of z axis
            </summary>
        </member>
        <member name="F:PCGAPI.Vector4.w">
            <summary>
            Value of w axis
            </summary>
        </member>
        <member name="M:PCGAPI.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a Vector3
            </summary>
            <param name="x">Value of x axis</param>
            <param name="y">Value of y axis</param>
            <param name="z">Value of z axis</param>
            <param name="w">Value of w axis</param>
        </member>
        <member name="M:PCGAPI.Vector4.Equals(System.Object)">
            <summary>
            Checks for equality between this and other
            </summary>
            <param name="other">Object being compared to this</param>
            <returns>True if this == object</returns>
        </member>
        <member name="M:PCGAPI.Vector4.GetHashCode">
            <summary>
            Returns the instance hash code
            </summary>
            <returns>The instance hash code</returns>
        </member>
        <member name="M:PCGAPI.Vector4.op_Equality(PCGAPI.Vector4,PCGAPI.Vector4)">
            <summary>
            Checks for equality between lhs and rhs
            </summary>
            <param name="lhs">Vector on the left side of ==</param>
            <param name="rhs">Vector on the right side of ==</param>
            <returns>True if lhs == rhs</returns>
        </member>
        <member name="M:PCGAPI.Vector4.op_Inequality(PCGAPI.Vector4,PCGAPI.Vector4)">
            <summary>
            Checks for inequality between lhs and rhs
            </summary>
            <param name="lhs">Vector on the left side of !=</param>
            <param name="rhs">Vector on the right side of !=</param>
            <returns>True if lhs != rhs</returns>
        </member>
        <member name="T:PCGAPI.GenerationParameters">
            <summary>
            Parameters used to generate levels
            </summary>
        </member>
        <member name="F:PCGAPI.GenerationParameters.count">
            <summary>
            Number of nodes that will need to be spawned
            </summary>
        </member>
        <member name="F:PCGAPI.GenerationParameters.size">
            <summary>
            Size of spawned node
            </summary>
        </member>
        <member name="F:PCGAPI.GenerationParameters.startPoint">
            <summary>
            Position of first spawned node
            </summary>
        </member>
        <member name="T:PCGAPI.ISequenceNode">
            <summary>
            Interface used to represent a node in a sequence
            </summary>
        </member>
        <member name="P:PCGAPI.ISequenceNode.NextNodes">
            <summary>
            IEnumerable of possible next nodes
            </summary>
        </member>
        <member name="P:PCGAPI.ISequenceNode.NextCount">
            <summary>
            Number of possible next node (Usually NextNodes.Count())
            </summary>
        </member>
        <member name="T:PCGAPI.AddNode">
            <summary>
            Notifies that a node was a spawned at position
            </summary>
            <param name="position">Spawned node position</param>
        </member>
        <member name="T:PCGAPI.AddWFCNode">
            <summary>
            Notifies that a node was a spawned at position and has the following adjacent nodes
            </summary>
            <param name="position">Spawned node position</param>
            <param name="adjacentNodes">Spawned node adjacent nodes</param>
        </member>
        <member name="T:PCGAPI.AddWFC4DNode">
            <summary>
            Notifies that a node was a spawned at position and has the following adjacent nodes
            </summary>
            <param name="position">Spawned node position</param>
            <param name="adjacentNodes">Spawned node adjacent nodes</param>
        </member>
        <member name="T:PCGAPI.AddWFCGridNode">
            <summary>
            Notifies that a node was a spawned at (x, y) coordinates and has the following adjacent nodes
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="adjacentNodes">Spawned node adjacent nodes</param>
        </member>
        <member name="T:PCGAPI.AddWFC3DGridNode">
            <summary>
            Notifies that a node was a spawned at (x, y, z) coordinates and has the following adjacent nodes
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <param name="adjacentNodes">Spawned node adjacent nodes</param>
        </member>
        <member name="T:PCGAPI.AddMazeNode">
            <summary>
            Notifies that a node was a spawned at (x, y) coordinates and has the following adjacent nodes
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="adjacentNodes">Spawned node adjacent nodes</param>
        </member>
        <member name="T:PCGAPI.SelectNode">
            <summary>
            User defined function to select next node in growing tree maze
            </summary>
            <param name="count">Next nodes count</param>
            <returns>Next node index</returns>
        </member>
        <member name="T:PCGAPI.GenerateCombination">
            <summary>
            Notifies if element at index is included in combination or not
            </summary>
            <param name="elementIndex">Index of element in combination</param>
            <param name="includedInSet">True if is included in combination</param>
        </member>
        <member name="T:PCGAPI.SetSeed">
            <summary>
            Sets the RNG seed
            </summary>
            <param name="seed">New seed value</param>
        </member>
        <member name="T:PCGAPI.GenerateNumber">
            <summary>
            Generates a number in range [min, max[
            </summary>
            <param name="min">Minimum value generated</param>
            <param name="max">Maximum value generated</param>
            <returns>Number in range [min, max[</returns>
        </member>
        <member name="T:PCGAPI.LogFunction">
            <summary>
            Logs message from native DLL
            </summary>
            <param name="message">Message logged</param>
        </member>
        <member name="T:PCGAPI.UpdateSequence">
            <summary>
            Update node in sequence and notifies which node is next (-1 if current node is the last)
            </summary>
            <param name="index">index of next nodes</param>
            <returns>Number of possible next nodes</returns>
        </member>
        <member name="T:PCGAPI.Axis">
            <summary>
            Axis used to generate levels
            </summary>
        </member>
        <member name="F:PCGAPI.Axis.none">
            <summary>
            No axis used
            </summary>
        </member>
        <member name="F:PCGAPI.Axis.positiveX">
            <summary>
            +X Axis
            </summary>
        </member>
        <member name="F:PCGAPI.Axis.negativeX">
            <summary>
            -X Axis
            </summary>
        </member>
        <member name="F:PCGAPI.Axis.positiveY">
            <summary>
            +Y Axis
            </summary>
        </member>
        <member name="F:PCGAPI.Axis.negativeY">
            <summary>
            -Y Axis
            </summary>
        </member>
        <member name="F:PCGAPI.Axis.positiveZ">
            <summary>
            +Z Axis
            </summary>
        </member>
        <member name="F:PCGAPI.Axis.negativeZ">
            <summary>
            -Z Axis
            </summary>
        </member>
        <member name="F:PCGAPI.Axis.x">
            <summary>
            X Axis
            </summary>
        </member>
        <member name="F:PCGAPI.Axis.y">
            <summary>
            Y Axis
            </summary>
        </member>
        <member name="F:PCGAPI.Axis.z">
            <summary>
            Z Axis
            </summary>
        </member>
        <member name="F:PCGAPI.Axis.xy">
            <summary>
            XY Plane
            </summary>
        </member>
        <member name="F:PCGAPI.Axis.xz">
            <summary>
            XZ Plane
            </summary>
        </member>
        <member name="F:PCGAPI.Axis.yz">
            <summary>
            YZ Plane
            </summary>
        </member>
        <member name="F:PCGAPI.Axis.xyz">
            <summary>
            XYZ Plane
            </summary>
        </member>
        <member name="T:PCGAPI.Plane">
            <summary>
            Plane used in level generation
            </summary>
        </member>
        <member name="F:PCGAPI.Plane.xy">
            <summary>
            XY Plane
            </summary>
        </member>
        <member name="F:PCGAPI.Plane.xz">
            <summary>
            XZ Plane
            </summary>
        </member>
        <member name="F:PCGAPI.Plane.yz">
            <summary>
            YZ Plane
            </summary>
        </member>
        <member name="T:PCGAPI.LevelGenerationDirection">
            <summary>
            Indicates adjacent nodes for generated nodes in levels
            </summary>
        </member>
        <member name="F:PCGAPI.LevelGenerationDirection.none">
            <summary>
            No adjacent nodes
            </summary>
        </member>
        <member name="F:PCGAPI.LevelGenerationDirection.left">
            <summary>
            Left adjacent node
            </summary>
        </member>
        <member name="F:PCGAPI.LevelGenerationDirection.right">
            <summary>
            Right adjacent node
            </summary>
        </member>
        <member name="F:PCGAPI.LevelGenerationDirection.forward">
            <summary>
            Forward adjacent node
            </summary>
        </member>
        <member name="F:PCGAPI.LevelGenerationDirection.backward">
            <summary>
            Backward adjacent node
            </summary>
        </member>
        <member name="F:PCGAPI.LevelGenerationDirection.up">
            <summary>
            Up adjacent node
            </summary>
        </member>
        <member name="F:PCGAPI.LevelGenerationDirection.down">
            <summary>
            Down adjacent node
            </summary>
        </member>
        <member name="F:PCGAPI.LevelGenerationDirection.portalIn">
            <summary>
            Portal going in new dimension
            </summary>
        </member>
        <member name="F:PCGAPI.LevelGenerationDirection.portalOut">
            <summary>
            Portal going out of new dimension
            </summary>
        </member>
        <member name="T:PCGAPI.MazeDirection">
            <summary>
            Indicates adjacent nodes for generated nodes in mazes
            </summary>
        </member>
        <member name="F:PCGAPI.MazeDirection.none">
            <summary>
            No adjacent nodes
            </summary>
        </member>
        <member name="F:PCGAPI.MazeDirection.left">
            <summary>
            Left adjacent node
            </summary>
        </member>
        <member name="F:PCGAPI.MazeDirection.right">
            <summary>
            Right adjacent node
            </summary>
        </member>
        <member name="F:PCGAPI.MazeDirection.forward">
            <summary>
            Forward adjacent node
            </summary>
        </member>
        <member name="F:PCGAPI.MazeDirection.backward">
            <summary>
            Backward adjacent node
            </summary>
        </member>
        <member name="T:PCGAPI.ExpansionMode">
            <summary>
            Indicates whether to use a Breadth-First or Depth-First approach with Wave Function Collapse Generation
            </summary>
        </member>
        <member name="F:PCGAPI.ExpansionMode.BFS">
            <summary>
            Breadth-First Search
            </summary>
        </member>
        <member name="F:PCGAPI.ExpansionMode.DFS">
            <summary>
            Depth-First Search
            </summary>
        </member>
        <member name="T:PCGAPI.MazeAlgorithm">
            <summary>
            Algorithm used to generate maze
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.aldousBroder">
            <summary>
            Aldous Broder
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.wilson">
            <summary>
            Wilson
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.binaryTreeNE">
            <summary>
            Binary Tree with a corrider along the North and East
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.binaryTreeNW">
            <summary>
            Binary Tree with a corrider along the North and West
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.binaryTreeSE">
            <summary>
            Binary Tree with a corrider along the South and East
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.binaryTreeSW">
            <summary>
            Binary Tree with a corrider along the South and West
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.sidewinder">
            <summary>
            Sidewinder
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.eller">
            <summary>
            Eller
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.huntAndKill">
            <summary>
            Hunt And Kill
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.recursiveBacktracker">
            <summary>
            Recursive Backtracker
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.recursiveDivision">
            <summary>
            Recursive Division
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.kruskal">
            <summary>
            Kruskal
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.prim">
            <summary>
            Prim
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.growingTreeOldest">
            <summary>
            Growing Tree select: Oldest Node
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.growingTreeMiddle">
            <summary>
            Growing Tree select: Middle Node
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.growingTreeNewest">
            <summary>
            Growing Tree select: Newest Node
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.growingTreeRandom">
            <summary>
            Growing Tree select: Random Node
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.blobbyDivisionCorridors">
            <summary>
            Blobby Division with no regions
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.blobbyDivisionSmall">
            <summary>
            Blobby Division with small regions
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.blobbyDivisionMedium">
            <summary>
            Blobby Division with meduim regions
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.blobbyDivisionLarge">
            <summary>
            Blobby Division with large regions
            </summary>
        </member>
        <member name="F:PCGAPI.MazeAlgorithm.blobbyDivisionHuge">
            <summary>
            Blobby Division with huge regions
            </summary>
        </member>
        <member name="T:PCGAPI.PCGEngine">
            <summary>
            PCGEngine is the middleman between the C# code and native C++ code
            </summary>
        </member>
        <member name="F:PCGAPI.PCGEngine.DLLName">
            <summary>
            Name of DLL
            </summary>
        </member>
        <member name="M:PCGAPI.PCGEngine.SetSeed(System.UInt32)">
            <summary>
            Set the RNG Seed
            </summary>
            <param name="seed">New seed value</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.SetRandomGenerators(PCGAPI.SetSeed,PCGAPI.GenerateNumber)">
            <summary>
            Set RNG generators
            </summary>
            <param name="setSeed">Function that will update the seed</param>
            <param name="generateNumber">Function that will generate numbers</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.SetLoggingFunction(PCGAPI.LogFunction)">
            <summary>
            Set function to log C++ message
            </summary>
            <param name="logFunction">Function that will log messages</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.GenerateMaze(System.Int32,System.Int32,System.Boolean,PCGAPI.MazeAlgorithm,PCGAPI.AddMazeNode)">
            <summary>
            Generate a maze using the passed in algorithm
            </summary>
            <param name="width">Grid Width</param>
            <param name="height">Grid Height</param>
            <param name="invokeAfterGeneration">If true callback will only be called after all nodes are generated</param>
            <param name="algorithm">Algorithm that will be used to generate maze</param>
            <param name="addMazeNode">Callback when a node is generated</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.GenerateGrowingTreeMaze(System.Int32,System.Int32,System.Boolean,PCGAPI.SelectNode,PCGAPI.AddMazeNode)">
            <summary>
            Generate a Growing Tree maze using a custom selection callback
            </summary>
            <param name="width">Grid width</param>
            <param name="height">Grid height</param>
            <param name="invokeAfterGeneration">If true callback will only be called after all nodes are generated</param>
            <param name="nodeCallback">Callback used to select a node from pending growing tree nodes</param>
            <param name="addMazeNode">Callback when a node is generated</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.GenerateBlobbyDivisionMaze(System.Int32,System.Int32,System.Boolean,System.Int32,PCGAPI.AddMazeNode)">
            <summary>
            Geneate maze using Blobby Division Algorithm
            </summary>
            <param name="width">Grid Width</param>
            <param name="height">Grid Height</param>
            <param name="invokeAfterGeneration">If true callback will only be called after all nodes are generated</param>
            <param name="regionThreshold">User defined region threshold</param>
            <param name="callback">Callback when a node is generated</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.SimpleGeneration(PCGAPI.GenerationParameters,PCGAPI.Vector3,PCGAPI.AddNode)">
            <summary>
            Generate a linear level on a single axis
            </summary>
            <param name="generationParameters">Object containing number of nodes that need to be generated, node size and starting position</param>
            <param name="offset">Offset between nodes</param>
            <param name="addNode">Callback when a node is generated</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.MultiDimensionalGeneration(PCGAPI.GenerationParameters,PCGAPI.Axis,System.Boolean,PCGAPI.AddNode)">
            <summary>
            Generate a level on multiple axes
            </summary>
            <param name="generationParameters">Object containing number of nodes that need to be generated, node size and starting position</param>
            <param name="axis">Axes flag indicating which axes are being used</param>
            <param name="disableOverlap">If true nodes cannot be generated on top of one another</param>
            <param name="addNode">Callback when a node is generated</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.WaveFunctionCollapseGeneration(PCGAPI.GenerationParameters,PCGAPI.ExpansionMode,PCGAPI.Axis,PCGAPI.AddWFCNode)">
            <summary>
            Generate a level using the Wave Function Collapse Algorithm
            </summary>
            <param name="generationParameters">Object containing number of nodes that need to be generated, node size and starting position</param>
            <param name="mode">If Breadth-First Search (BFS) or Depth-First Search (DFS) expansion should be used</param>
            <param name="axis">Axes flag indicating which axes are being used</param>
            <param name="addNode">Callback when a node is generated</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.WaveFunctionCollapse4DGeneration(PCGAPI.GenerationParameters,PCGAPI.ExpansionMode,PCGAPI.Axis,PCGAPI.AddWFC4DNode)">
            <summary>
            Generate a 4D level using the Wave Function Collapse Algorithm
            </summary>
            <param name="generationParameters">Object containing number of nodes that need to be generated, node size and starting position</param>
            <param name="mode">If Breadth-First Search (BFS) or Depth-First Search (DFS) expansion should be used</param>
            <param name="axis">Axes flag indicating which axes are being used</param>
            <param name="addNode">Callback when a node is generated</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.WaveFunctionCollapseGeneration(System.Int32,System.Int32,PCGAPI.Plane,System.Boolean,PCGAPI.AddWFCGridNode)">
            <summary>
             Generate a grid using the Wave Function Collapse Algorithm
            </summary>
            <param name="x">Grid width</param>
            <param name="y">Grid height</param>
            <param name="plane">Plane indicating on which plane is the grid being spawned</param>
            <param name="invokeAfterGeneration">If true callback will only be called after all nodes are generated</param>
            <param name="addNode">Callback when a node is generated</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.WaveFunctionCollapseGeneration(System.Int32,System.Int32,System.Int32,System.Boolean,PCGAPI.AddWFC3DGridNode)">
            <summary>
            Generate a grid using the Wave Function Collapse Algorithm
            </summary>
            <param name="x">Grid width</param>
            <param name="y">Grid height</param>
            <param name="z">Grid depth</param>
            <param name="invokeAfterGeneration">If true callback will only be called after all nodes are generated</param>
            <param name="addNode">Callback when a node is generated</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.GenerateCombination(System.Int32,PCGAPI.GenerateCombination)">
            <summary>
            Generate a combination given a number of elements
            </summary>
            <param name="elementCount">Number of element that are available in set</param>
            <param name="generateCombination">Callback to add element to generated set</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.GenerateCombination(System.Int32,System.Int32,PCGAPI.GenerateCombination)">
            <summary>
            Generate a combination with at least minimumElementCount elements
            </summary>
            <param name="elementCount">Number of element that are available in set</param>
            <param name="minimumElementCount">Minimum number of elements in set</param>
            <param name="generateCombination">Callback to add element to generated set</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.GenerateCombination(System.Int32,System.Int32[],System.Int32,PCGAPI.GenerateCombination)">
            <summary>
            Generate a combination with the given elements active
            </summary>
            <param name="elementCount">Number of element that are available in set</param>
            <param name="includedElementsIndex">Array of elements that must be included</param>
            <param name="includedElementsCount">Number of elements in activeElementsIndex array</param>
            <param name="generateCombination">Callback to add element to generated set</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.GenerateSequence(System.Int32,PCGAPI.UpdateSequence)">
            <summary>
            Generate a sequence starting from node
            </summary>
            <param name="nextNodes">Count of next nodes from first node in sequence</param>
            <param name="updateSequence">Callback to add next node in sequence and returns next node possibility count</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.GenerateSequence(PCGAPI.ISequenceNode,PCGAPI.UpdateSequence)">
            <summary>
            Generate a sequence starting from node
            </summary>
            <param name="node">First node in sequence</param>
            <param name="updateSequence">Callback to add next node in sequence and returns next node possibility count</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.GenerateCyclicSequence(System.Int32,System.Int32,PCGAPI.UpdateSequence)">
            <summary>
            Generate a sequence that can contain cycles starting with node
            </summary>
            <param name="nextNodeCount">Count of next nodes from first node in sequence</param>
            <param name="sequenceLength">Max length of generated sequence</param>
            <param name="updateSequence">Callback to add next node in sequence and returns next node possibility count</param>
        </member>
        <member name="M:PCGAPI.PCGEngine.GenerateCyclicSequence(PCGAPI.ISequenceNode,System.Int32,PCGAPI.UpdateSequence)">
            <summary>
            Generate a sequence that can contain cycles starting with node
            </summary>
            <param name="node">First node in sequence</param>
            <param name="sequenceLength">Max length of generated sequence</param>
            <param name="updateSequence">Callback to add next node in sequence and returns next node possibility count</param>
        </member>
    </members>
</doc>
